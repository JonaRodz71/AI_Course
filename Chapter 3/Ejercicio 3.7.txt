import heapq
import math
from collections import deque

def heuristic(v1, v2):
    """Euclidean distance heuristic."""
    return math.sqrt((v1[0] - v2[0])**2 + (v1[1] - v2[1])**2)

def dijkstra(graph, start, goal):
    pq = [(0, start)]
    costs = {start: 0}
    parents = {start: None}
    
    while pq:
        cost, vertex = heapq.heappop(pq)
        
        if vertex == goal:
            break

        if cost > costs[vertex]:  # Skip if a better path has been found
            continue

        for neighbor, edge_cost in graph.get(vertex, []):
            new_cost = cost + edge_cost
            if neighbor not in costs or new_cost < costs[neighbor]:
                costs[neighbor] = new_cost
                parents[neighbor] = vertex
                heapq.heappush(pq, (new_cost, neighbor))
    
    path = reconstruct_path(parents, goal)
    return len(path) - 1 if path else float('inf')

def astar(graph, start, goal):
    pq = [(heuristic(start, goal), 0, start)]
    costs = {start: 0}
    parents = {start: None}
    
    while pq:
        _, g, vertex = heapq.heappop(pq)
        
        if vertex == goal:
            break

        if g > costs[vertex]:  # Skip if a better path has been found
            continue

        for neighbor, edge_cost in graph.get(vertex, []):
            new_cost = g + edge_cost
            if neighbor not in costs or new_cost < costs[neighbor]:
                costs[neighbor] = new_cost
                parents[neighbor] = vertex
                f_score = new_cost + heuristic(neighbor, goal)
                heapq.heappush(pq, (f_score, new_cost, neighbor))
    
    path = reconstruct_path(parents, goal)
    return len(path) - 1 if path else float('inf')

def bfs(graph, start, goal):
    """Breadth-First Search (inefficient because it ignores weights)."""
    queue = deque([(start, 0)])  # (node, moves)
    visited = set()
    
    while queue:
        vertex, moves = queue.popleft()

        if vertex == goal:
            return moves

        if vertex in visited:
            continue
        visited.add(vertex)

        for neighbor, _ in graph.get(vertex, []):  # Ignores edge costs
            queue.append((neighbor, moves + 1))

    return float('inf')  # If no path is found

def reconstruct_path(parents, goal):
    """Reconstructs the shortest path if possible."""
    if goal not in parents:
        return []
    
    path = []
    while goal is not None:
        path.append(goal)
        goal = parents[goal]
    return path[::-1]

def compare_algorithms(graph, start, goal):
    dijkstra_moves = dijkstra(graph, start, goal)
    astar_moves = astar(graph, start, goal)
    bfs_moves = bfs(graph, start, goal)
    
    print(f"Dijkstra's Moves: {dijkstra_moves}")
    print(f"A* Moves: {astar_moves}")
    print(f"BFS Moves: {bfs_moves}")

    print("\nComparison:")
    if dijkstra_moves == astar_moves:
        print("✅ A* and Dijkstra found the shortest path with the same number of moves.")
    else:
        print("⚠️ A* may have found a more efficient path.")

    if bfs_moves > dijkstra_moves:
        print("❌ BFS was inefficient—it does not consider edge weights.")
    elif bfs_moves == dijkstra_moves:
        print("⚠️ BFS performed well, but only because the graph structure allowed it.")

if __name__ == "__main__":
    graph = {
        (0, 0): [((1, 0), 1), ((0, 1), 10)],
        (1, 0): [((0, 0), 1), ((1, 1), 1)],
        (0, 1): [((0, 0), 10), ((1, 1), 1)],
        (1, 1): [((1, 0), 1), ((0, 1), 1), ((2, 2), 5)],
        (2, 2): [((1, 1), 5)]
    }

    start = (0, 0)
    goal = (2, 2)

    compare_algorithms(graph, start, goal)